<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_880077_crossplan.CRSDB_Category</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CRSDB_Category</name>
        <script><![CDATA[var CRSDB_Category = Class.create();
CRSDB_Category.prototype = {
    initialize: function() {
    },

    type: 'CRSDB_Category'
};


var TableID = "x_880077_crossplan_crsdb_category"; //DB Table

CRSDB_Category.write = function write(current) {	
	var gr = new GlideRecord(TableID);
	gr.id = current.id;
	gr.name = current.name;	
	gr.type = current.type;
	gr.status = current.status;
	gr.variable = current.variable;
	gr.workflow = current.workflow;
	gr.catalog = current.catalog;
	gr.description = current.description;
	gr.parent = current.parent;
	gr.insert();				
};

CRSDB_Category.getID = function getID(name){
	var gr = new GlideRecord(TableID);
	gr.query();
	while(gr.next()){
		if( gr.name == name){
			return gr.id;
		}		
	}
	return -1;
};

function deleteCategory(id){
	var category = new sn_sc.CatCategory(id);
	category.deleteRecord();
}

CRSDB_Category.deleteAll = function deleteAll(){
	var gr = new GlideRecord(TableID);
	gr.query();
	while(gr.next()){
		deleteCategory(gr.id);			
		gr.deleteRecord();	
	}		
};

CRSDB_Category.deleteByType = function deleteByType(type){
	var gr = new GlideRecord(TableID);
	gr.query();
	while(gr.next()){
		if (gr.type == type){
			deleteCategory(gr.id);			
			gr.deleteRecord();	
		}		
	}		
};

CRSDB_Category.deleteByID = function deleteByID(id){

	var gr = new GlideRecord(TableID);
	gr.query();
	while(gr.next()){
		if (gr.id == id){			
			deleteCategory(gr.id);			
			gr.deleteRecord();	
		}		
	}		
};


CRSDB_Category.deleteByName = function deleteByName(name){
	var gr = new GlideRecord("sc_category");
	gr.query();	
	while(gr.next()){
		if (gr.title == name){
			deleteCategory(gr.getUniqueValue());			
			gr.deleteRecord();	
		}		
	}
};

CRSDB_Category.getByFilter = function getByFilter(key,value){
	var gr = new GlideRecord(TableID);
	gr.query();
	gr.addQuery(key,value);
	return gr;
};




]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-31 13:53:38</sys_created_on>
        <sys_id>617b933e473211504b6fcc88f36d43d3</sys_id>
        <sys_mod_count>56</sys_mod_count>
        <sys_name>CRSDB_Category</sys_name>
        <sys_package display_value="CrossplaneV2" source="x_880077_crossplan">bdc0bd6847ba19104b6fcc88f36d43bd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CrossplaneV2">bdc0bd6847ba19104b6fcc88f36d43bd</sys_scope>
        <sys_update_name>sys_script_include_617b933e473211504b6fcc88f36d43d3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-08 12:36:12</sys_updated_on>
    </sys_script_include>
</record_update>
