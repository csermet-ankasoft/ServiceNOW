<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_880077_crossplan_crs_jobqueue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>CRS_JobProcessing</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    if (current.state == "Processing") {
        try {
            if (current.topic == "Write CatItem") {
                this.writeCatItem(current);
            } else if (current.topic == "Create CatItem") {
                this.createCatItem(current);
            } else if (current.topic == "Delete CatItem") {
                this.deleteCatItem(current);
            } else if (current.topic == "Write Category") {
                this.writeProviderCategory(current);
            } else if (current.topic == "Create Category") {
                this.createProviderCategory(current);
            } else if (current.topic == "Delete Category") {
                this.deleteCategory(current);
            } else if (current.topic == "Write Main Category") {
                this.writeMainCategory(current);
            } else if (current.topic == "Create Main Category") {
                this.createMainCategory(current);
            } else if (current.topic == "Write Group Category") {
                this.writeGroupCategory(current);
            } else if (current.topic == "Create Group Category") {
                this.createGroupCategory(current);
            } else if (current.topic == "Create CatItemVariable") {
                this.createCatItemVariable(current);
            } else if (current.topic == "Delete CatItemVariable") {
                this.deleteCatItemVariable(current);
            }
            current.state == "Completed";
        } catch (err) {
            CRSLog.debug("Error CRS_JobProcessing Business Rule " + err);
            if (current.retry >= gs.getProperty("x_880077_crossplan.JobRetryCount")) {
                current.state = "Error";
            } else {
                current.state = "Ready";
                current.retry += 1;
            }
        }
        current.update();
    }

})(current, previous);

function writeMainCategory(current) {
    CRSLog.debug('Run -> Write Main Category JOB');

    var mainCategoryAttr = JSON.parse(current.body);
    var mainCategory = new GlideRecord('x_880077_crossplan_crsdb_category');
    mainCategory.status = 'Waiting For Create';
    mainCategory.catalog = mainCategoryAttr.sc_catalog;
    mainCategory.name = mainCategoryAttr.name;
    mainCategory.type = mainCategoryAttr.type;
    mainCategory.insert();
    current.state = "Completed";
}

function createMainCategory(current) {
    CRSLog.debug("Run -> Create Main Category JOB");

    var mainCategoryAttr = JSON.parse(current.body);
    var scope = gs.getProperty('x_880077_crossplan.scope_id');
    var mainCategory = new sn_sc.CatCategory();
    var attr = {
        "title": mainCategoryAttr.title,
        "sc_catalog": mainCategoryAttr.sc_catalog,
        "sys_scope": scope,
        "type": mainCategoryAttr.type
    };
    mainCategory.setAttributes(attr);
    var mainCategoryID = mainCategory.create();

    var categoryTable = new GlideRecord('x_880077_crossplan_crsdb_category');
    categoryTable.addQuery('sys_id', mainCategoryAttr.sys_id);
    categoryTable.query();
    if (categoryTable.next()) {
        categoryTable.status = "Created";
        categoryTable.id = mainCategoryID;
        categoryTable.update();
    }

    current.state = "Completed";
}

function writeProviderCategory(current) {
    CRSLog.debug('Run -> Write Category JOB');

    var category = new GlideRecord('x_880077_crossplan_crsdb_category');
    var sc_catalogID = gs.getProperty('x_880077_crossplan.serviceCatalogID');
    var providerID = CRSDB_Provider.getIDByName(gs.getProperty('x_880077_crossplan.main_provider_title'));
    var provider = JSON.parse(current.body);

    category.name = provider["metadata"]["name"];
    category.type = provider["kind"];
    category.status = "Waiting For Create";
    category.catalog = sc_catalogID;
    category.description = provider["spec"]["package"];
    category.parent = providerID;
    category.insert();
    current.state = "Completed";
}

function createProviderCategory(current) {
    CRSLog.debug("Run -> Create Category JOB");

    var scope = gs.getProperty('x_880077_crossplan.scope_id');
    var categoryAttr = JSON.parse(current.body);

    var category = new sn_sc.CatCategory();
    var attr = {
        "title": categoryAttr.name,
        "parent": categoryAttr.parent,
        "sys_scope": scope,
        "sc_catalog": categoryAttr.catalog,
        "description": categoryAttr.description
    };
    category.setAttributes(attr);
    var categoryID = category.create();

    var categoryTable = new GlideRecord('x_880077_crossplan_crsdb_category');
    categoryTable.addQuery('sys_id', categoryAttr.sys_id);
    categoryTable.query();
    if (categoryTable.next()) {
        categoryTable.status = "Created";
        categoryTable.id = categoryID;
        categoryTable.update();
    }

    current.state = "Completed";
}

function writeGroupCategory(current) {
    CRSLog.debug('Run -> Write Group Category JOB');

    var group = JSON.parse(current.body);
    var category = new GlideRecord('x_880077_crossplan_crsdb_category');
    var sc_catalogID = gs.getProperty('x_880077_crossplan.serviceCatalogID');
    var providerID = CRSDB_Provider.getIDByName(group.providerName);
    category.name = group.groupName;
    category.status = "Waiting For Create";
    category.catalog = sc_catalogID;
    // 	category.description = group["spec"]["package"];
    category.parent = providerID;
    category.insert();
    current.state = "Completed";
}

function createGroupCategory(current) {
    CRSLog.debug("Run -> Create Group Category JOB");

    var scope = gs.getProperty('x_880077_crossplan.scope_id');
    var categoryAttr = JSON.parse(current.body);

    var category = new sn_sc.CatCategory();
    var attr = {
        "title": categoryAttr.name,
        "parent": categoryAttr.parent,
        "sys_scope": scope,
        "sc_catalog": categoryAttr.catalog,
        "description": categoryAttr.description
    };
    category.setAttributes(attr);
    var categoryID = category.create();

    var categoryTable = new GlideRecord('x_880077_crossplan_crsdb_category');
    categoryTable.addQuery('sys_id', categoryAttr.sys_id);
    categoryTable.query();
    if (categoryTable.next()) {
        categoryTable.status = "Created";
        categoryTable.id = categoryID;
        categoryTable.update();
    }

    current.state = "Completed";
}

function deleteCategory(current) {
    CRSLog.debug("Run -> Delete Category JOB");

    var categoryDelete = new sn_sc.CatCategory(current.body);
    categoryDelete.deleteRecord();
    current.state = "Completed";
}

function writeCatItem(current) {
    CRSLog.debug("Run -> writeCatItem_Job");
    var catItemBody = JSON.parse(current.body);
    var sc_catalogID = gs.getProperty('x_880077_crossplan.serviceCatalogID');
    var parentID = CRSDB_Provider.getIDByName(catItemBody.group);
    var vars = JSON.stringify(catItemBody.vars);
    var catItem = new GlideRecord("x_880077_crossplan_crsdb_catitem");
    catItem.initialize();
    catItem.name = catItemBody.name;
    catItem.group = catItemBody.group;
    catItem.variable = vars;
    catItem.short_description = catItemBody.desc;
    catItem.status = "Waiting For Create";
    catItem.catalogs = sc_catalogID;
    catItem.category = parentID;
    catItem.insert();
    current.state = "Completed";
}

function createCatItem(current) {
    CRSLog.debug("Run -> createCatItem JOB");

    var scope = gs.getProperty('x_880077_crossplan.scope_id');
    var catItemAttr = JSON.parse(current.body);

    var catItem = new sn_sc.CatItem();
    var attr = {
        "name": catItemAttr.name,
        "sys_scope": scope,
        "category": catItemAttr.parent,
        "sc_catalogs": catItemAttr.catalogs
    };
    catItem.setAttributes(attr);
    var catItemID = catItem.create();

    var catItemTable = new GlideRecord('x_880077_crossplan_crsdb_catitem');
    catItemTable.addQuery('sys_id', catItemAttr.sys_id);
    catItemTable.query();
    if (catItemTable.next()) {
        catItemTable.status = "Waiting For Variable";
        catItemTable.id = catItemID;
        catItemTable.update();
    }

    current.state = "Completed";
}

function deleteCatItem(current) {
    CRSLog.debug("Run -> Delete CatItem JOB");
    var variableSetM2M = new GlideRecord('io_set_item');
    variableSetM2M.addQuery('sc_cat_item', current.body);
    variableSetM2M.query();
    while (variableSetM2M.next()) {
        var varset = new sn_sc.CatalogItemVariableSetM2M(variableSetM2M.getUniqueValue());
        varset.deleteRecord(true);
    }
    var catItem = new sn_sc.CatItem(current.body);
    catItem.deleteRecord(true);
    current.state = "Completed";
}

function createCatItemVariable(current) {
    var varBody = JSON.parse(current.body);
    var catItemId = varBody.sys_id;
    var catItemVar = varBody.var;
    //CRSLog.info(catItemVar);
    if (catItemVar) {
        for (var i in catItemVar) {
            var gr = new GlideRecord("item_option_new");
            CRSLog.warn(catItemVar[i]);
            gr.initialize();
            gr.cat_item = catItemId;
            gr.question_text = catItemVar[i];
            gr.label = catItemVar[i];
			gr.name = catItemVar[i];
            //gr.type = variableType;
            gr.insert();
        }
    }
    current.state = "Completed";
}

function deleteCatItemVariable(current) {
	var itemVarId = current.id;
	itemVarId.deleteRecord(true);
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-21 13:11:43</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c7bb9ba1479751504b6fcc88f36d4341</sys_id>
        <sys_mod_count>130</sys_mod_count>
        <sys_name>CRS_JobProcessing</sys_name>
        <sys_overrides/>
        <sys_package display_value="CrossplaneV2" source="x_880077_crossplan">bdc0bd6847ba19104b6fcc88f36d43bd</sys_package>
        <sys_policy/>
        <sys_scope display_value="CrossplaneV2">bdc0bd6847ba19104b6fcc88f36d43bd</sys_scope>
        <sys_update_name>sys_script_c7bb9ba1479751504b6fcc88f36d4341</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-08-04 10:41:07</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=c7bb9ba1479751504b6fcc88f36d4341"/>
</record_update>
