<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_880077_crossplan_crs_jobqueue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>CRS_JobProcessing</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    if (current.state == "Processing") {
        try {
            if (current.topic == "Write CatItem") {
                this.addCatItemtoCRSDB_CatItem(current);
            } else if (current.topic == "Create CatItem") {
                this.createCatItemJOB(current);
            } else if (current.topic == "Delete CatItem") {
                this.deleteCatItem(current);
            } else if (current.topic == "Write Category") {
                this.writeCategory(current);
            } else if (current.topic == "Create Category") {
                this.createCategory(current);
            } else if (current.topic == "Delete Category") {
                this.deleteCategory(current);
            }
            current.state == "Completed";
        } catch (err) {
            CRSLog.debug("Error CRS_JobProcessing Business Rule " + err);
            if (current.retry >= gs.getProperty("x_880077_crossplan.JobRetryCount")) {
                current.state = "Error";
            } else {
                current.state = "Ready";
                current.retry += 1;
            }
        }
        current.update();
    }

})(current, previous);

function writeCategory(current) {
    CRSLog.debug('Run -> Write Category JOB');

    var Catalog = new GlideRecord('x_880077_crossplan_crsdb_category');
    var catalogID = gs.getProperty('x_880077_crossplan.serviceCatalogID');
    var providerID = CRSDB_Provider.getIDByName(gs.getProperty('x_880077_crossplan.main_provider_title'));
    var provider = JSON.parse(current.body);
	for(i in provider["metadata"]["ownerReferences"]){
		var providerItem = provider["metadata"]["ownerReferences"][i];
		Catalog.name = providerItem["name"];
		Catalog.type = providerItem["kind"];
	}
   

    Catalog.status = "Waiting For Create";
    Catalog.catalog = catalogID;
    Catalog.description = provider["spec"]["package"];
    Catalog.parent = providerID;
    Catalog.insert();
    current.state = "Completed";
}

function createCategory(current) {
    CRSLog.debug("Run -> Create Category JOB");

    var scope = gs.getProperty('x_880077_crossplan.scope_id');
    var cat = JSON.parse(current.body);

    var category = new sn_sc.CatCategory();
    var attr = {
        "title": cat.name,
        "parent": cat.parent,
        "sys_scope": scope,
        "sc_catalog": cat.catalog,
        "description": cat.description
    };
    category.setAttributes(attr);
    var catID = category.create();

    var catTable = new GlideRecord('x_880077_crossplan_crsdb_category');
    catTable.addQuery('sys_id', cat.sys_id);
    catTable.query();
    if (catTable.next()) {
        catTable.status = "Created";
        catTable.id = catID;
        catTable.update();
    }

    current.state = "Completed";
}

function deleteCategory(current) {
    CRSLog.debug("Run -> Delete Category JOB");

    var categoryDelete = new sn_sc.CatCategory(current.body);
    categoryDelete.deleteRecord();
    current.state = "Completed";
}

function createCatItemJOB(current) {
    CRSLog.debug("Run -> createCatItem JOB");
    var catItem = JSON.parse(current.body);

    var catItems = new GlideRecord("x_880077_crossplan_crsdb_catitem");
    catItems.query("name", catItem.name);
    catItems.next();
    var catalogItemID = createCatItem(catItems);
    if (catalogItemID) {
        CRSLog.debug("Completed -> Catalog_Item_Script.create");
        var catItemTable = new GlideRecord('x_880077_crossplan_crsdb_catitem');
        catItemTable.addQuery('sys_id', catItem.sys_id);
        catItemTable.query();
        if (catItemTable.next()) {
            catItemTable.status = "Created";
            catItemTable.id = catalogItemID;
            catItemTable.update();
        }
        current.state = "Completed";
    } else {
        current.state = "Failed";
    }

}

function createCatItem(current) {
    CRSLog.debug("Run -> createCatItem JOB");
    // 	var catItem = JSON.parse(current.body);

    var catalogItem = new sn_sc.CatItem();
    var scope = gs.getProperty('x_880077_crossplan.scope_id');
    var attributes = {
        "name": current.name,
        "sys_scope": scope,
    };
    if (current.descriptions) attributes["description"] = current.descriptions;
    if (current.short_description) attributes["short_description"] = current.short_description;
    if (current.price) attributes["price"] = current.price;
    catalogItem.setAttributes(attributes);
    catalogItem.setCatalogs(current.catalogs);
    catalogItem.setCategories(current.category);
    var catalogItemID = catalogItem.create();

    return catalogItemID;
}

function deleteCatItem(current) {
    CRSLog.debug("Run -> Delete CatItem JOB");
    var variableSetM2M = new GlideRecord('io_set_item');
    variableSetM2M.addQuery('sc_cat_item', current.body);
    variableSetM2M.query();
    while (variableSetM2M.next()) {
        var varset = new sn_sc.CatalogItemVariableSetM2M(variableSetM2M.getUniqueValue());
        varset.deleteRecord(true);
    }
    var catItem = new sn_sc.CatItem(current.body);
    catItem.deleteRecord(true);
    current.state = "Completed";
}

function addCatItemtoCRSDB_CatItem(current) {
    CRSLog.debug("Run -> writeCatItem_Job");

    var catalogID = gs.getProperty('x_880077_crossplan.main_category_title');
    var provider_name = "";
    var apiversion = "";
    var CRD_item = JSON.parse(current.body);
    var providerIsExist = false;
    for (j in CRD_item["metadata"]["ownerReferences"]) {
        var CRD_item_ref = CRD_item["metadata"]["ownerReferences"][j];
        if (CRD_item_ref["kind"] == "Provider") {
            provider_name = CRD_item_ref["name"];
            apiversion = CRD_item_ref["apiVersion"];
            providerIsExist = true;
            break;
        }
    }
    if (providerIsExist == true) {
        var catItem = new GlideRecord("x_880077_crossplan_crsdb_catitem");
        var providerID = CRSDB_Provider.getIDByName(provider_name) + "";
        CRSLog.info(providerID + ':::' + provider_name);
        var serviceCatalogID = gs.getProperty('x_880077_crossplan.serviceCatalogID');
        catItem.initialize();
        catItem.short_description = CRD_item["metadata"]["name"] + "  " + apiversion;
        catItem.name = CRD_item["spec"]["names"]["singular"];
        //+ " ---> " + CRD_item["spec"]["group"].split(".")[0];
        catItem.type = "CRD_CatItem";
        catItem.group = CRD_item["spec"]["group"];
        catItem.status = "Waiting For Create";
        catItem.catalogs = serviceCatalogID;
        catItem.category = providerID;
        catItem.type = "provider";
        catItem.insert();
        current.state = "Completed";
    } else {
        current.state = "Not a Provider";
        //         current.update();
        //         current.deleteRecord();
    }
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-21 13:11:43</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c7bb9ba1479751504b6fcc88f36d4341</sys_id>
        <sys_mod_count>71</sys_mod_count>
        <sys_name>CRS_JobProcessing</sys_name>
        <sys_overrides/>
        <sys_package display_value="CrossplaneV2" source="x_880077_crossplan">bdc0bd6847ba19104b6fcc88f36d43bd</sys_package>
        <sys_policy/>
        <sys_scope display_value="CrossplaneV2">bdc0bd6847ba19104b6fcc88f36d43bd</sys_scope>
        <sys_update_name>sys_script_c7bb9ba1479751504b6fcc88f36d4341</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-01 21:18:53</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=c7bb9ba1479751504b6fcc88f36d4341"/>
</record_update>
